//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.07.02 at 05:11:41 PM EEST 
//


package tr.com.agem.metadata.xul.impl;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for alignAttributeType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="alignAttributeType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="start"/>
 *     &lt;enumeration value="center"/>
 *     &lt;enumeration value="end"/>
 *     &lt;enumeration value="baseline"/>
 *     &lt;enumeration value="stretch"/>
 *     &lt;enumeration value="left"/>
 *     &lt;enumeration value="center"/>
 *     &lt;enumeration value="right"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "alignAttributeType")
@XmlEnum
public enum AlignAttributeType {


    /**
     * Child elements are aligned starting from the left or top edge of the box. If the box is larger than the total size of the children, the extra space is placed on the right or bottom side.
     * 
     */
    @XmlEnumValue("start")
    START("start"),

    /**
     * 
     *             Extra space is split equally along each side of the child elements, resulting the children being placed in the center of the box.
     *           
     * 
     */
    @XmlEnumValue("center")
    CENTER("center"),

    /**
     * Child elements are placed on the right or bottom edge of the box. If the box is larger than the total size of the children, the extra space is placed on the left or top side.
     * 
     */
    @XmlEnumValue("end")
    END("end"),

    /**
     * This value applies to horizontally oriented boxes only. It causes the child elements to be aligned so that their text labels are lined up.
     * 
     */
    @XmlEnumValue("baseline")
    BASELINE("baseline"),

    /**
     * The child elements are stretched to fit the size of the box. For a horizontal box, the children are stretched to be the height of the box. For a vertical box, the children are stretched to be the width of the box. If the size of the box changes, the children stretch to fit. Use the flex attribute to create elements that stretch in the opposite direction.
     * 
     */
    @XmlEnumValue("stretch")
    STRETCH("stretch"),

    /**
     * 
     *             Deprecated!
     *             The elements are aligned on their left edges.
     *           
     * 
     */
    @XmlEnumValue("left")
    LEFT("left"),

    /**
     * 
     *             Deprecated!
     *             The elements are aligned on their right edges
     *           
     * 
     */
    @XmlEnumValue("right")
    RIGHT("right");
    private final String value;

    AlignAttributeType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static AlignAttributeType fromValue(String v) {
        for (AlignAttributeType c: AlignAttributeType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
