//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.07.02 at 05:11:41 PM EEST 
//


package tr.com.agem.metadata.xul.impl;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for panellevelAttributeType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="panellevelAttributeType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="top"/>
 *     &lt;enumeration value="parent"/>
 *     &lt;enumeration value="none"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "panellevelAttributeType")
@XmlEnum
public enum PanellevelAttributeType {


    /**
     * top: The panel is shown in front of all other normal windows, including those of other applications.
     * 
     */
    @XmlEnumValue("top")
    TOP("top"),

    /**
     * parent: The panel is shown just above the window the panel is in, but behind other windows above it. If anchored, the child window maintains its relative position to its parent window.
     * 
     */
    @XmlEnumValue("parent")
    PARENT("parent"),

    /**
     * floating: (New in Firefox 4) The panel floats above the window the panel is in. On Mac, the panel is only visible when the application is active.
     * 
     */
    @XmlEnumValue("none")
    NONE("none");
    private final String value;

    PanellevelAttributeType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static PanellevelAttributeType fromValue(String v) {
        for (PanellevelAttributeType c: PanellevelAttributeType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
